@using Microsoft.FluentUI.AspNetCore.Components.DesignTokens
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using TastyEatsBD.WebApp.Services.Theme

@inject ThemeService Theme

@rendermode InteractiveServer

<FluentStack Orientation="Orientation.Vertical" VerticalGap="20">
    <FluentLabel Typo="Typography.H4">Themes & Colors</FluentLabel>
    <FluentDivider Style="width: 100%;" Role="DividerRole.Presentation"></FluentDivider>
    <FluentGrid Style="width:100%">
        <FluentGridItem>
            <FluentSelect Label="Theme"
                          Items="@(Enum.GetValues<DesignThemeModes>())"
                          @bind-SelectedOption="@_themeMode" />
        </FluentGridItem>

        <FluentGridItem>
            <FluentSelect Label="Color"
                          Items="@(Enum.GetValues<OfficeColor>())"
                          Height="200px"
                          @bind-SelectedOption="@_officeColor">
                <OptionTemplate>
                    <FluentStack>
                        <FluentIcon Value="@(new Icons.Filled.Size20.RectangleLandscape())"
                                    Color="Color.Custom"
                                    CustomColor="@context.ToAttributeValue()" />
                        <FluentLabel>@context</FluentLabel>
                    </FluentStack>
                </OptionTemplate>
            </FluentSelect>
        </FluentGridItem>
    </FluentGrid>
</FluentStack>

<FluentDesignTheme @bind-Mode="@_themeMode"
                   OfficeColor="@_officeColor"
                   OfficeColorChanged="@OnOfficeColorChanged"
                   OnLuminanceChanged="@OnLuminanceChanged"
                   StorageName="theme" />

@code
{
    public DesignThemeModes _themeMode { get; set; }

    public OfficeColor _officeColor { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var (luminance, color) = await Theme.GetUserThemeAsync();
        
        _themeMode = luminance == StandardLuminance.DarkMode ? DesignThemeModes.Dark : DesignThemeModes.Light;

        _officeColor = Enum.GetValues(typeof(OfficeColor))
                .Cast<OfficeColor>()
                .FirstOrDefault(officeColor => officeColor.GetDescription() == color);
    }

    Task OnLuminanceChanged(LuminanceChangedEventArgs e)
    {
        var x = $"{(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}";

        var luminance = e.IsDark ? StandardLuminance.DarkMode : StandardLuminance.LightMode;
        
        return Theme.ChangeLuminanceAsync(luminance);
    }

    Task OnOfficeColorChanged(OfficeColor? officeColor)
    {
        _officeColor = officeColor ?? OfficeColor.Default;

        var colorHex = _officeColor.ToAttributeValue() ?? "default";

        return Theme.ChangeThemeColor(colorHex);
    }
}