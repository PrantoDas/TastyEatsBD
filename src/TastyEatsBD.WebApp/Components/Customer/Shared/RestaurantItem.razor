@using TastyEatsBD.Core.Entities;
@using TastyEatsBD.Core.Interfaces
@using TastyEatsBD.WebApp.Services.Cart

@inject ICartService CartService

<FluentGrid Justify="JustifyContent.SpaceBetween" Style="width:100%">
    <FluentGridItem xs="8" sm="9">
        <FluentStack Orientation="Orientation.Vertical">
            <FluentLabel Typo="Typography.Subject" Weight="FontWeight.Bold">
                @Item.Name
            </FluentLabel>
            <FluentLabel Typo="Typography.Body">
                @Item.Description
            </FluentLabel>
            <FluentLabel Style="font-weight:bold;">
                <FluentIcon Value="@(new Icons.Regular.Size20.Money())" /> @Item.Price.ToString("C")
            </FluentLabel>
        </FluentStack>
    </FluentGridItem>
    <FluentGridItem xs="4" sm="3" Style="flex-direction:column; align-items:flex-end" Justify="JustifyContent.SpaceBetween" Gap=".5rem">
        <ImageLoader PhotoURL="@Item.PhotoURL" Style="height:50px; width: auto; border-radius:10px;" />

        @if (CanAddToCart == true)
        {
            <FluentButton Appearance="Appearance.Lightweight"
                          IconStart="@(new Icons.Regular.Size20.Cart())"
                          OnClick="@(() => AddToCartAsync())"
                          Style=@($"border: 1px solid #CCCCCC; border-radius: 4px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);")>

                @if (CartItem.Quantity > 0)
                {
                    <FluentCounterBadge Count="CartItem.Quantity"
                                        Style="left:90%;"
                                        Appearance="Appearance.Accent">
                        Add
                    </FluentCounterBadge>
                }
                else
                {
                    @("Add")
                }

            </FluentButton>
        }

    </FluentGridItem>
</FluentGrid>

@code {
    [CascadingParameter]
    private CartState CartState { get; set; }

    [Parameter]
    public Item Item { get; set; }

    [Parameter]
    public bool? CanAddToCart { get; set; } = false;

    private CartItem CartItem { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if(CanAddToCart == true)
        {
            CartItem = await CartService.GetItemInfoAsync(Item.Id).ConfigureAwait(false);
        }
    }

    private async void AddToCartAsync()
    {
        if (CartState.Cart?.RestaurantId != Item.RestaurantId)
        {
            // TODO: Take Confirmation
            await CartService.ClearCartAsync().ConfigureAwait(false);
        }

        await CartService.AddToCartAsync(Item.Id).ConfigureAwait(false);
        CartItem = await CartService.GetItemInfoAsync(Item.Id).ConfigureAwait(false);

        await CartState.NotifyChangesAsync();
        await InvokeAsync(() =>
        {
            // Any UI update logic
            StateHasChanged();
        });
    }
}
